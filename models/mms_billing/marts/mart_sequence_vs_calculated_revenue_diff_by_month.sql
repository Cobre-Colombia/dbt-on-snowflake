{{ config(
    post_hook=[
        "grant select on table {{ this }} to role DATA_DEV_L1",
        "grant select on table {{ this }} to role SALES_OPS_DEV_L0"
    ]
) }}

WITH BASE_CALCULATED AS (
    SELECT SEQUENCE_CUSTOMER_ID, GROUP_ID, PRODUCT_NAME, PRICING_TYPE, TIER_APPLICATION_BASIS, DATE_TRUNC('MONTH', TRANSACTION_MONTH) AS TRANSACTION_MONTH, MAX(ACCUMULATED_REVENUE) AS CALCULATED_REVENUE,
        CASE WHEN TIER_APPLICATION_BASIS = 'amount' THEN MAX(ACCUMULATED_AMOUNT) ELSE MAX(TRANSACTION_COUNT) END AS TIER_APPLICATION_VALUE
    FROM mart_revenue_by_group_id_by_month
    GROUP BY 1, 2, 3, 4, 5, 6
)
-- 1. CTE base de clientes-grupo-producto y tipo de pricing
, CUSTOMER_GROUPS AS (
    SELECT DISTINCT 
        SEQUENCE_CUSTOMER_ID, 
        GROUP_ID, 
        PRICING_TYPE, 
        MINIMUM_REVENUE
    FROM {{ ref('mart_revenue_by_group_id_by_month') }}
    WHERE IS_SAAS_TRANSACTION = TRUE
)

, DISTINCT_MONTH AS (
    SELECT DISTINCT 
        DATE_TRUNC('MONTH', TRANSACTION_MONTH) AS TRANSACTION_MONTH
    FROM {{ ref('mart_revenue_by_group_id_by_month') }}
)

, TRX_COUNT AS (
    SELECT 
        cg.SEQUENCE_CUSTOMER_ID,
        cg.GROUP_ID,
        'true up charge' AS PRODUCT_NAME,
        cg.PRICING_TYPE,
        'amount' AS TIER_APPLICATION_BASIS,
        dm.TRANSACTION_MONTH,
        cg.MINIMUM_REVENUE,
        MAX(m.TRANSACTION_COUNT) AS TRANSACTION_COUNT
    FROM CUSTOMER_GROUPS cg
    CROSS JOIN DISTINCT_MONTH dm
    LEFT JOIN {{ ref('mart_revenue_by_group_id_by_month') }} m
        ON m.SEQUENCE_CUSTOMER_ID = cg.SEQUENCE_CUSTOMER_ID
        AND m.GROUP_ID = cg.GROUP_ID
        AND m.PRICING_TYPE = cg.PRICING_TYPE
        AND DATE_TRUNC('MONTH', m.TRANSACTION_MONTH) = dm.TRANSACTION_MONTH
        AND m.IS_SAAS_TRANSACTION = TRUE
    GROUP BY 1, 2, 3, 4, 5, 6,7
)
, REMAINING_MINIMUM_AMOUNT AS (
    SELECT DISTINCT r.SEQUENCE_CUSTOMER_ID, r.GROUP_ID
        , 'true up charge' AS PRODUCT_NAME
        , NULL AS PRICING_TYPE, 'amount' AS TIER_APPLICATION_BASIS, DATE_TRUNC('MONTH', r.TRANSACTION_MONTH) AS TRANSACTION_MONTH
        , TRX_COUNT.TRANSACTION_COUNT
        , MIN(
                CASE 
                    WHEN TRX_COUNT.TRANSACTION_COUNT > 0 THEN r.REMAINING_MINIMUM_AMOUNT
                    ELSE TRX_COUNT.MINIMUM_REVENUE
                END
            ) AS CALCULATED_REVENUE
        ,1 AS TIER_APPLICATION_VALUE
    FROM {{ ref('mart_revenue_by_group_id_by_month') }} r
    LEFT JOIN TRX_COUNT
        ON r.SEQUENCE_CUSTOMER_ID = TRX_COUNT.SEQUENCE_CUSTOMER_ID
        AND r.TRANSACTION_MONTH::DATE = TRX_COUNT.TRANSACTION_MONTH::DATE
    GROUP BY 1, 2, 3, 4, 5, 6, 7
)
, BASE AS (
  SELECT * FROM BASE_CALCULATED
  UNION ALL
  SELECT SEQUENCE_CUSTOMER_ID, GROUP_ID, PRODUCT_NAME, PRICING_TYPE, TIER_APPLICATION_BASIS,TRANSACTION_MONTH, CALCULATED_REVENUE, TIER_APPLICATION_VALUE
  FROM REMAINING_MINIMUM_AMOUNT
)

,
unique_invoice AS (
    SELECT INVOICE_ID,
    MAX(MODIFIED_AT) AS MODIFIED_AT
    FROM COBRE_GOLD_DB.SEQUENCE.INVOICE_LINE_ITEMS
    WHERE DELETED_AT IS NULL
    GROUP BY 1
    )
,     
SEQUENCE_ AS (
    SELECT
        c.ID AS CUSTOMER_ID,
        c.LEGAL_NAME,
        c.CUSTOMER_ALIASES,
        il.INVOICE_ID,
        il.billing_schedule_id,
        il.price_id,
        DATE_TRUNC('MONTH', TO_DATE(i.BILLING_PERIOD_START)) AS BILLING_PERIOD_START,
        LAST_DAY(TO_DATE(i.BILLING_PERIOD_END)) AS BILLING_PERIOD_END,
        LOWER(il.TITLE) AS TITLE,
        LOWER(p.PRODUCT_NAME) AS PRODUCT_NAME,
        ROUND(il.NET_TOTAL) AS NET_TOTAL,
        il.CURRENCY,
        ROUND(sc.PRICE_MINIMUM_AMOUNT) AS PRICE_MINIMUM_AMOUNT,
        il.QUANTITY AS TIER_APPLICATION_VALUE
    FROM COBRE_GOLD_DB.SEQUENCE.INVOICE_LINE_ITEMS il
    JOIN unique_invoice u
        ON il.invoice_id = u.invoice_id
        AND il.MODIFIED_AT = u.MODIFIED_AT
    JOIN COBRE_GOLD_DB.SEQUENCE.INVOICES i
        ON il.invoice_id = i.id
    JOIN COBRE_GOLD_DB.SEQUENCE.CUSTOMERS c
        ON i.customer_id = c.id
    LEFT JOIN COBRE_GOLD_DB.SEQUENCE.PRICES p
        ON il.PRICE_ID = p.ID
    LEFT JOIN COBRE_GOLD_DB.SEQUENCE.BILLING_SCHEDULE_PHASE_PRICES sc
        ON il.PRICE_ID = sc.price_id
            AND il.billing_schedule_id = sc.billing_schedule_id
            AND i.BILLING_PERIOD_START >= sc.phase_start_date 
            AND i.BILLING_PERIOD_START <= COALESCE(sc.phase_end_date, '2099-01-01')
    WHERE  (sc.STATUS IN ('ACTIVE', 'COMPLETED') OR sc.STATUS IS NULL)
    AND sc.PHASE_ARCHIVED_AT IS NULL
    AND il.DELETED_AT IS NULL
    AND i.STATUS <> 'VOIDED'
), 

SEQUENCE_PRODUCT AS (

SELECT LEGAL_NAME, CUSTOMER_ID, COALESCE(PRODUCT_NAME, TITLE) AS PRODUCT_NAME, DATE_TRUNC('MONTH', BILLING_PERIOD_START) AS TRANSACTION_MONTH, SUM(NET_TOTAL) NET_TOTAL, SUM(TIER_APPLICATION_VALUE) AS TIER_APPLICATION_VALUE
FROM SEQUENCE_
GROUP BY 1, 2, 3, 4
)

SELECT 
    S.LEGAL_NAME AS GROUP_NAME,
    B.GROUP_ID,
    B.SEQUENCE_CUSTOMER_ID,
    B.PRODUCT_NAME AS CALCULATED_PRODUCT_NAME,
    S.PRODUCT_NAME AS SEQUENCE_PRODUCT_NAME,
    S.TRANSACTION_MONTH AS BILLING_PERIOD,
    B.PRICING_TYPE,
    CASE   
        WHEN B.TIER_APPLICATION_BASIS IS NULL 
            THEN B.PRICING_TYPE 
        ELSE UPPER(B.TIER_APPLICATION_BASIS) 
    END AS TIER_APPLICATION_BASIS,
    ROUND(B.TIER_APPLICATION_VALUE, 0) AS CALCULATED_TIER_APPLICATION_VALUE,
    ROUND(S.TIER_APPLICATION_VALUE, 0) AS SEQUENCE_TIER_APPLICATION_VALUE,
    COALESCE(CALCULATED_REVENUE, 0) AS CALCULATED_REVENUE_COP,
    COALESCE(S.NET_TOTAL, 0) AS SEQUENCE_REVENUE_COP, 
    COALESCE(CALCULATED_REVENUE, 0) - COALESCE(S.NET_TOTAL, 0) AS COP_DIFFERENCE,

    COALESCE(
        ROUND(
            CASE
                WHEN CALCULATED_REVENUE_COP = 0 AND SEQUENCE_REVENUE_COP = 0 THEN 0
                ELSE (CALCULATED_REVENUE_COP::FLOAT - SEQUENCE_REVENUE_COP::FLOAT)
                    / NULLIF((CALCULATED_REVENUE_COP::FLOAT + SEQUENCE_REVENUE_COP::FLOAT) / 2, 0)
                    * 100
            END,
        2),
    0) AS RELATIVE_PERCENTAGE_DIFFERENCE


FROM BASE B
FULL OUTER JOIN SEQUENCE_PRODUCT S
    ON B.SEQUENCE_CUSTOMER_ID = S.CUSTOMER_ID 
   AND LOWER(B.PRODUCT_NAME) = LOWER(S.PRODUCT_NAME)
   AND B.TRANSACTION_MONTH = S.TRANSACTION_MONTH
WHERE 
    (B.GROUP_ID IS NOT NULL AND ( GROUP_NAME IS NULL AND CALCULATED_PRODUCT_NAME <> 'true up charge'))
    OR S.CUSTOMER_ID IN (
        SELECT DISTINCT SEQUENCE_CUSTOMER_ID
        FROM BASE
    ) 
ORDER BY GROUP_NAME ASC, BILLING_PERIOD ASC, CALCULATED_PRODUCT_NAME ASC, COP_DIFFERENCE